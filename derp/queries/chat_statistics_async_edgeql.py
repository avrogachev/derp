# AUTOGENERATED FROM 'derp/queries/chat_statistics.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ChatStatisticsResult(NoPydanticValidation):
    id: uuid.UUID
    chat_id: int
    display_name: str | None
    total_updates: int
    active_updates: int
    handled_updates: int
    unhandled_updates: int


async def chat_statistics(
    executor: gel.AsyncIOExecutor,
    *,
    chat_id: int,
) -> ChatStatisticsResult | None:
    return await executor.query_single(
        """\
        # Get chat statistics (update counts by type)
        # Parameters: $chat_id
        select telegram::Chat {
            chat_id,
            display_name,
            total_updates := count(.<chat[is telegram::BotUpdate]),
            active_updates := count(.<chat[is telegram::ActiveBotUpdates]),
            handled_updates := count((select .<chat[is telegram::BotUpdate] filter .handled)),
            unhandled_updates := count((select .<chat[is telegram::BotUpdate] filter not .handled))
        }
        filter .chat_id = <int64>$chat_id;\
        """,
        chat_id=chat_id,
    )
