# AUTOGENERATED FROM 'derp/queries/updates_by_type_time.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpdatesByTypeTimeResult(NoPydanticValidation):
    id: uuid.UUID
    update_id: int
    update_type: str
    created_at: datetime.datetime
    handled: bool | None
    chat: UpdatesByTypeTimeResultChat | None
    from_user: UpdatesByTypeTimeResultFromUser | None


@dataclasses.dataclass
class UpdatesByTypeTimeResultChat(NoPydanticValidation):
    id: uuid.UUID
    chat_id: int
    display_name: str | None


@dataclasses.dataclass
class UpdatesByTypeTimeResultFromUser(NoPydanticValidation):
    id: uuid.UUID
    user_id: int
    display_name: str | None


async def updates_by_type_time(
    executor: gel.AsyncIOExecutor,
    *,
    update_type: str,
    start_time: datetime.datetime | None = None,
    end_time: datetime.datetime | None = None,
) -> list[UpdatesByTypeTimeResult]:
    return await executor.query(
        """\
        # Get updates by type and time range
        # Parameters: $update_type, $start_time?, $end_time?
        select telegram::ActiveBotUpdates {
            id,
            update_id,
            update_type,
            created_at,
            handled,
            chat: {
                chat_id,
                display_name
            },
            from_user: {
                user_id,
                display_name
            }
        }
        filter 
            .update_type = <str>$update_type and
            .created_at >= (<optional datetime>$start_time ?? datetime_of_statement() - <cal::relative_duration>'7 days') and
            .created_at <= (<optional datetime>$end_time ?? datetime_of_statement())
        order by .created_at desc;\
        """,
        update_type=update_type,
        start_time=start_time,
        end_time=end_time,
    )
