# AUTOGENERATED FROM 'derp/queries/upsert_user.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpsertUserResult(NoPydanticValidation):
    id: uuid.UUID
    user_id: int
    display_name: str | None
    created_at: datetime.datetime
    updated_at: datetime.datetime


async def upsert_user(
    executor: gel.AsyncIOExecutor,
    *,
    user_id: int,
    is_bot: bool,
    first_name: str,
    last_name: str | None = None,
    username: str | None = None,
    language_code: str | None = None,
    is_premium: bool | None = None,
    added_to_attachment_menu: bool | None = None,
    metadata: str | None = None,
) -> UpsertUserResult:
    return await executor.query_single(
        """\
        # Upsert User (insert or update based on user_id)
        # Parameters: $user_id, $is_bot, $first_name, $last_name?, $username?, $language_code?, $is_premium?, $added_to_attachment_menu?, $metadata?
        select (
            insert telegram::User {
                user_id := <int64>$user_id,
                is_bot := <bool>$is_bot,
                first_name := <str>$first_name,
                last_name := <optional str>$last_name,
                username := <optional str>$username,
                language_code := <optional str>$language_code,
                is_premium := <optional bool>$is_premium ?? false,
                added_to_attachment_menu := <optional bool>$added_to_attachment_menu ?? false,
                metadata := <optional json>$metadata ?? <json>'{}'
            }
            unless conflict on .user_id
            else (
                update telegram::User
                set {
                    is_bot := <bool>$is_bot,
                    first_name := <str>$first_name,
                    last_name := <optional str>$last_name,
                    username := <optional str>$username,
                    language_code := <optional str>$language_code,
                    is_premium := <optional bool>$is_premium ?? false,
                    added_to_attachment_menu := <optional bool>$added_to_attachment_menu ?? false,
                    metadata := <optional json>$metadata ?? <json>'{}'
                }
            )
        ) {
            id,
            user_id,
            display_name,
            created_at,
            updated_at
        };\
        """,
        user_id=user_id,
        is_bot=is_bot,
        first_name=first_name,
        last_name=last_name,
        username=username,
        language_code=language_code,
        is_premium=is_premium,
        added_to_attachment_menu=added_to_attachment_menu,
        metadata=metadata,
    )
