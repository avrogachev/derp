# AUTOGENERATED FROM 'derp/queries/recent_activity.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class RecentActivityResult(NoPydanticValidation):
    id: uuid.UUID
    update_id: int
    update_type: str
    created_at: datetime.datetime
    chat: RecentActivityResultChat | None
    from_user: RecentActivityResultFromUser | None


@dataclasses.dataclass
class RecentActivityResultChat(NoPydanticValidation):
    id: uuid.UUID
    chat_id: int
    display_name: str | None


@dataclasses.dataclass
class RecentActivityResultFromUser(NoPydanticValidation):
    id: uuid.UUID
    user_id: int
    display_name: str | None


async def recent_activity(
    executor: gel.AsyncIOExecutor,
) -> list[RecentActivityResult]:
    return await executor.query(
        """\
        # Get recent activity across all chats (last 24 hours)
        # Parameters: none
        with cutoff_time := datetime_of_statement() - <cal::relative_duration>'24 hours'
        select telegram::ActiveBotUpdates {
            id,
            update_id,
            update_type,
            created_at,
            chat: {
                chat_id,
                display_name
            },
            from_user: {
                user_id,
                display_name
            }
        }
        filter .created_at >= cutoff_time
        order by .created_at desc
        limit 100;\
        """,
    )
