# AUTOGENERATED FROM 'derp/queries/insert_bot_update.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class InsertBotUpdateResult(NoPydanticValidation):
    id: uuid.UUID


async def insert_bot_update(
    executor: gel.AsyncIOExecutor,
    *,
    user_id: int | None = None,
    chat_id: int | None = None,
    update_id: int,
    update_type: str,
    raw_data: str,
    handled: bool | None = None,
) -> InsertBotUpdateResult:
    return await executor.query_single(
        """\
        # Insert BotUpdate
        # Parameters: $update_id, $update_type, $raw_data, $user_id?, $chat_id?, $handled?
        with
            user := (select telegram::User filter .user_id = <optional int64>$user_id limit 1),
            chat := (select telegram::Chat filter .chat_id = <optional int64>$chat_id limit 1)
        insert telegram::BotUpdate {
            update_id := <int64>$update_id,
            update_type := <str>$update_type,
            raw_data := <json>$raw_data,
            handled := <optional bool>$handled ?? false,
            from_user := user,
            chat := chat
        };\
        """,
        user_id=user_id,
        chat_id=chat_id,
        update_id=update_id,
        update_type=update_type,
        raw_data=raw_data,
        handled=handled,
    )
