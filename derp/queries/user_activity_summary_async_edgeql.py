# AUTOGENERATED FROM 'derp/queries/user_activity_summary.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UserActivitySummaryResult(NoPydanticValidation):
    id: uuid.UUID
    user_id: int
    display_name: str | None
    total_updates: int
    active_updates: int
    recent_chats: list[UserActivitySummaryResultRecentChatsItem]


@dataclasses.dataclass
class UserActivitySummaryResultRecentChatsItem(NoPydanticValidation):
    id: uuid.UUID
    chat_id: int
    display_name: str | None
    last_activity: datetime.datetime | None


async def user_activity_summary(
    executor: gel.AsyncIOExecutor,
    *,
    user_id: int,
) -> UserActivitySummaryResult | None:
    return await executor.query_single(
        """\
        # Get user activity summary
        # Parameters: $user_id
        select telegram::User {
            user_id,
            display_name,
            total_updates := count(.updates),
            active_updates := count((select .updates filter not .is_expired)),
            recent_chats := (
                select distinct (.updates.chat) {
                    chat_id,
                    display_name,
                    last_activity := max(.<chat[is telegram::BotUpdate].created_at)
                }
                order by .last_activity desc
                limit 10
            )
        }
        filter .user_id = <int64>$user_id;\
        """,
        user_id=user_id,
    )
