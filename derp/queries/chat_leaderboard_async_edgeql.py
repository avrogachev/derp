# AUTOGENERATED FROM 'derp/queries/chat_leaderboard.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ChatLeaderboardResult(NoPydanticValidation):
    id: uuid.UUID
    chat_id: int
    display_name: str | None
    type: str
    update_count: int
    last_activity: datetime.datetime | None


async def chat_leaderboard(
    executor: gel.AsyncIOExecutor,
) -> list[ChatLeaderboardResult]:
    return await executor.query(
        """\
        # Get chat leaderboard (most active chats by update count)
        select telegram::Chat {
            chat_id,
            display_name,
            type,
            update_count := count(.<chat[is telegram::ActiveBotUpdates]),
            last_activity := max(.<chat[is telegram::BotUpdate].created_at)
        }
        filter exists .<chat[is telegram::BotUpdate]
        order by .update_count desc
        limit 20;\
        """,
    )
